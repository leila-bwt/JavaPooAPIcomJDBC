package application;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import db.DB;

public class Program {

	public static void main(String[] args) {
		
		// inserir dados no db
		
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		Connection conn = null;
		PreparedStatement st = null; // Monta consulta SQL e permite colocar os argumentos depois
		try {
			conn = DB.getConnetion();
			
			st = conn.prepareStatement(
					"Insert Into seller "
					+ "(Name, Email, BirthDate, BaseSalary, DepartmentId)"
					+ "VALUES "
					+"(?,?,?,?,?)");
			
			st.setString(1, "Carl Purple");
			st.setString(2, "carl@gmail.com");
			st.setDate(3, new java.sql.Date(sdf.parse("22/04/1985").getTime())); // para instanciar data no JDBC e jogar no PreparedStatement nao pode usar o java.util
			st.setDouble(4, 3000.00);
			st.setInt(5, 4);
			
			int rowsAffected = st.executeUpdate(); // vai executar os comandos para inserção dos dados		
			
			System.out.println("Done! Rows affected: " + rowsAffected); // retorna o numero de linhas alteradas no db
			
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		catch(ParseException e ) {
			e.printStackTrace(); // imprime msg de erro caso essa data esteja no formato inválido
		}
		finally {
			DB.closeStatement(st);
			DB.closeConnection();
		}
		
		
	}
}

// Statement.RETURN_GENERATED_KEYS Permite recuperar Id do novo obejto inserido